Universal Script System (USS) - Универсальная система скриптов

= Архитектура =
Система состоит из двух независимых частей - скриптовых объектов (Scriptable) и скриптовых движков (ScriptEngine).
Взаимодействие конечного пользователя с системой осуществляется через менеджер скриптов - ScriptManager. Он позволяет регистрировать и удалять скриптовые движки, скриптабельные объекты и их фабрики.

== Объекты ==
Взаимодействие с системой начинается с регистрации скриптовых движков и фабрик объектов. Для возможности создания объектов из скриптов, они порождаются фабрикой, которая и регистрируется в менеджере скриптов для их создания. Так сделано потому, что объект при конструюровании может потребовать каких-либо параметров, а для того, чтобы скриптовый движок узнал об объекте, его надо каким-то образом зарегистрировать, а для этого ужна инстанция объекта, который мы не можем создать без данных, которые предоставит скрипт. Эта проблема обходится путем разделения объекта на скриптабельную сущность и вспомогательный объект, который будет предоставлять скриптовому движку необходимую информацию о скриптабельном объекте в любое время (т.е. с момента регистрации до момента дерегистрации), т.е. существовать не менее времени жизни скриптового движка. Так как этот вспомогательный объект помогает скриптовому движку создавать объекты из скрипта, он является фабрикой этих скриптабельных объектов.
Исходя из этих соображений, скриптабельные объекты представляются двумя классами - Scriptable и ScriptableFactory. ScriptableFactory предоставляет описание "класса" объекта, в то время как Scriptable представляет инстанцию этого "класса".
Scriptable может иметь свойства, методы и индексы. Свойства и методы обобщаются понятием поле объекта. Все поля объекта являются такими же Scriptable-объектами. Благодаря тому, что любой Scriptable-объект может быть вычислен. Ту надо немного отвлечься, и объяснить, каким образом вычисляются поля и индексы объекта.

=== Вычислители и индексаторы ===
Многие современные скриптовые языки являются мультипарадигменными и позволяют программировать в функциональном стиле. Для максимально полной интеграции в такие языки, USS декларирует, что любой объект может быть вычислен, как функция, и индексирован другим объектом или стандартным типом данных. Реализация этих механизмов ложится на плечи скриптового движка и создатели скриптабельных объектов не должны об этом заботится. Те движки, которые не позволяют такие возможности, могут эмулировать их, например, специальным методом объекта.
Однако, объект не вычисляется и не индексируется самостояятельно. За него это делают два интерфейса - вычислитель (Evaluator) и индексатор (Indexator). Это сделано для того, чтобы позволить перегруженные функции и индексы. Scriptable возвращает списки вычислителей и индексаторов методами callers и indexators соответственно. Скриптовый движок автоматически выберет наиболее подходящий по сигнатуре вычислитель или индексатор при попытке вычислить или индексировать объект в соответствии с переданными из скрипта данными.

=== Поля ===
Каждый объект может иметь от 0 до неограниченного количества полей. Каждое поле имеет уникальное имя и тип - метод или свойство. Перегрузка методов реализуется путем того, что каждое поле может иметь несколько вычислителей, различающихся входными данными и возвращаемыми значениями. Так как поле - это такой же Scriptable, как и владелец этого поля, то работа с вычислением значений объектов унифицирована. Единственное, чем поля отличаются от "обычных" Scriptable - это то, что их обычно нельзя создать непосредственно из скрипта (да и зачем?) и метод Scriptable::isField() возвращает true.

=== Как реализовать скриптабельный объект ===


== Скриптовые движки ==
Другой компонент системы - скриптовые движки. Взаимодействие между скриптовым движком и скриптабельным объектом осуществляется посредством скриптовой переменной - ScriptVar и моста между ScriptVar и конкретным движком - Bridge.
ScriptVar позволяет абстагироваться от представления типов данных в различных скриптовых движках. Этот класс позволяет передавать различные данные между движком и системой посредством функций pack и unpack, а также проверять на соответствие данные из внутренних структур движка (обычно тип) данным, которые может хранить конкретный подкласс ScriptVar. Для этих целей используется интерфейс моста - Bridge.

=== Как реализовать скриптовый движок ===
