--[=[
-- Структура объекта
objectTypeName={
    methods={
    -- список методов (см. ниже)
    },
    properties={
    -- список свойств (см. ниже)
    },
    indexes={
    -- список индексов (см. ниже)
    },
}

-- структура метода
methodName={
    [0] = 'строка докуметации'
    -- Перегрузки метода
    -- i[nput]  - входные параметры
    -- o[utput] - выходные параметры
    -- 
    -- Списки параметров содержат списки элементов вида:
    -- {param<N>Name=param<N>Type}, где
    --  * param<N>Name - имя <N>-го параметра
    --  * param<N>Type - тип <N>-го параметра
    -- 
    -- Для входных параметров имя параметра позволит указывать именные
    -- параметры вместо позиционных для тех языков, которые это поддерживают.
    -- Для выходных параметров указание имени для результата (если их более 1)
    -- позволит упаковать их в выходную структуру с понятными именами, если 
    -- язык позволяет только одно возвращаемое значение.
    {i={}, o={}},-- без параметров
    {i={{param1Name=param1Type},}, o={}},-- с одним параметром с именем param1Name и типом param1Type
    {i={{param1Name=param1Type},{param2Name=param2Type},}, o={}},-- с двумя параметрами
}
-- структура свойства
propertyName=propertyType
-- структура индекса
index={
    [0] = 'строка докуметации'
    {i=inType1, o=outType1},
    {i=inType2, o=outType2},
    {i=inType3, o=outType3},
}
]=]
local G = require "generators"
-- Пример для пары, содержащей два метода:
--   string key()
--   int    value()
-- два свойства:
--   string first
--   int    second
-- и один индекс (три варианта результата в зависимости от входного параметра):
--   string | int | iterator obj[int]
local objects = {
ScriptablePair={
    constructors={
        {},
        {{key='string'},},
        {{key='string'},{value='int'}},
    },
    methods={
        key={
            [0]='Получает ключ пары',
            {i={},o={'string',}},
        },
        value={
            [0]='Получает значение пары',
            {i={},o={'int',}},
        },
    },
    properties={
        first='string',
        second='int',
    },
    indexes={
        {
            [0]=[=[
Если входной параметр равен 1, возвращает результат {@link key()}, если 2,
то возвращает результат {@link value()}, в остальных случаях возвращает
итератор от переданного числа до 1.]=],
            i={'int'}, o={'string','int','iterator',}
        },
    },
},
}

G.generateCode(objects)