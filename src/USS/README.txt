Universal Script System (USS) - Универсальная система скриптов

= Архитектура =
Система состоит из двух независимых частей - скриптовых объектов (IScriptable) и скриптовых движков (ScriptEngine).
Взаимодействие конечного пользователя с системой осуществляется через менеджер скриптов - ScriptManager. Он позволяет регистрировать и удалять скриптовые движки, скриптабельные объекты и их фабрики.

== Объекты ==
Взаимодействие с системой начинается с регистрации скриптовых движков и классов объектов. Для возможности создания объектов из скриптов, они порождаются фабрикой - объектом класса, который и регистрируется в менеджере скриптов для их создания. Так сделано потому, что объект при конструировании может потребовать каких-либо параметров, а для того, чтобы скриптовый движок узнал об объекте, его надо каким-то образом зарегистрировать, а для этого нужна инстанция объекта, который мы не можем создать без данных, которые предоставит скрипт. Эта проблема обходится путем разделения объекта на скриптабельную сущность и вспомогательный объект, который будет предоставлять скриптовому движку необходимую информацию о скриптабельном объекте в любое время (т.е. с момента регистрации до момента дерегистрации), т.е. существовать не менее времени жизни скриптового движка. Так как этот вспомогательный объект помогает скриптовому движку создавать объекты из скрипта, он является фабрикой этих скриптабельных объектов.
Исходя из этих соображений, скриптабельные объекты представляются двумя классами - IScriptable и IClass. IClass предоставляет описание "класса" объекта, в то время как IScriptable представляет инстанцию этого "класса".
IScriptable может иметь свойства, методы и индексы. Свойства и методы обобщаются понятием поле объекта. Все поля объекта реализуют интерфейс IField.

=== Вычислители и индексаторы ===
Многие современные скриптовые языки являются мультипарадигменными и позволяют программировать в функциональном стиле. Для максимально полной интеграции в такие языки, USS декларирует, что любой объект может быть вычислен, как функция, и индексирован другим объектом или стандартным типом данных. Реализация этих механизмов ложится на плечи скриптового движка и создатели скриптабельных объектов не должны об этом заботится. Те движки, которые не позволяют такие возможности, могут эмулировать их, например, специальным методом объекта.
Однако, объект не вычисляется и не индексируется самостоятельно. За него это делают два интерфейса - вычислитель (IEvaluator) и индексатор (IIndexator). Это сделано для того, чтобы позволить перегруженные функции и индексы. Кстати, методы также являются вычислителями.
Каждый вычислитель или индексатор сообщает, какие данные он ожидает на вход и какие данные мы получим на выходе. Так же и вычислитель, и индексатор имеют метод для непосредственного вычисления, куда передаются объект, для которого вызван вычислитель или индексатор, а также входные и выходные параметры. Скриптовый движок гарантирует, что это будут те же самые данные, которые ранее были возвращены соответствующими методами. Смотрите документацию в исходных файлах.

=== Как реализовать скриптабельный объект ===
Смотрите примеры в папке <Ogre Systems Root>/USS/demo.

== Скриптовые движки ==
Другой компонент системы - скриптовые движки. Взаимодействие между скриптовым движком и скриптабельным объектом осуществляется посредством скриптовой переменной - ScriptVar и моста между ScriptVar и конкретным движком - Bridge.
ScriptVar позволяет абстагироваться от представления типов данных в различных скриптовых движках. Этот класс позволяет передавать различные данные между движком и системой посредством функций pack и unpack, а также проверять на соответствие данные из внутренних структур движка (обычно тип) данным, которые может хранить конкретный подкласс ScriptVar. Для этих целей используется интерфейс моста - Bridge.

=== Как реализовать скриптовый движок ===
Смотрите пример скриптового движка Lua.
